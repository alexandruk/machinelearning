#Cidade.py
class Cidade:
    def __init__(self, nome):
        self.nome = nome
        self.visitado = False
        self.adjacentes = []
        
    def addCidadeAdjacente(self, cidade):
        self.adjacentes.append(cidade)



#Adjacente.py
class Adjacente:
    def __init__(self, cidade):
        self.cidade = cidade



#Mapa.py
from Cidade import Cidade
from Adjacente import Adjacente

class Mapa:
    fozDoIguacu = Cidade("Foz do Iguaçu")
    cascavel = Cidade("Cascavel")
    patoBranco = Cidade("Pato Branco")
    campoMourao = Cidade("Campo Mourão")
    maringa = Cidade("Maringá")
    guarapuava = Cidade("Guarapuava")
    londrina = Cidade("Londrina")
    uniaoDaVitoria = Cidade("União da Vitória")
    irati = Cidade("Irati")
    pontaGrossa = Cidade("Ponta Grossa")
    curitiba = Cidade("Curitiba")
    
    fozDoIguacu.addCidadeAdjacente(Adjacente(cascavel))
    fozDoIguacu.addCidadeAdjacente(Adjacente(patoBranco))
    
    cascavel.addCidadeAdjacente(Adjacente(fozDoIguacu))
    cascavel.addCidadeAdjacente(Adjacente(campoMourao))
    cascavel.addCidadeAdjacente(Adjacente(guarapuava))
    cascavel.addCidadeAdjacente(Adjacente(patoBranco))
    
    patoBranco.addCidadeAdjacente(Adjacente(fozDoIguacu))
    patoBranco.addCidadeAdjacente(Adjacente(guarapuava))
    
    campoMourao.addCidadeAdjacente(Adjacente(maringa))
    campoMourao.addCidadeAdjacente(Adjacente(cascavel))
    campoMourao.addCidadeAdjacente(Adjacente(guarapuava))
    
    maringa.addCidadeAdjacente(Adjacente(campoMourao))
    maringa.addCidadeAdjacente(Adjacente(londrina))
    
    guarapuava.addCidadeAdjacente(Adjacente(patoBranco))
    guarapuava.addCidadeAdjacente(Adjacente(cascavel))
    guarapuava.addCidadeAdjacente(Adjacente(campoMourao))
    guarapuava.addCidadeAdjacente(Adjacente(londrina))
    guarapuava.addCidadeAdjacente(Adjacente(pontaGrossa))
    guarapuava.addCidadeAdjacente(Adjacente(irati))
    
    londrina.addCidadeAdjacente(Adjacente(maringa))
    londrina.addCidadeAdjacente(Adjacente(guarapuava))
    londrina.addCidadeAdjacente(Adjacente(pontaGrossa))
    
    uniaoDaVitoria.addCidadeAdjacente(Adjacente(cascavel))
    uniaoDaVitoria.addCidadeAdjacente(Adjacente(irati))
    uniaoDaVitoria.addCidadeAdjacente(Adjacente(curitiba))
    
    irati.addCidadeAdjacente(Adjacente(uniaoDaVitoria))
    irati.addCidadeAdjacente(Adjacente(guarapuava))
    irati.addCidadeAdjacente(Adjacente(curitiba))
    
    pontaGrossa.addCidadeAdjacente(Adjacente(londrina))
    pontaGrossa.addCidadeAdjacente(Adjacente(guarapuava))
    pontaGrossa.addCidadeAdjacente(Adjacente(curitiba))
    
    curitiba.addCidadeAdjacente(Adjacente(pontaGrossa))
    curitiba.addCidadeAdjacente(Adjacente(irati))
    curitiba.addCidadeAdjacente(Adjacente(uniaoDaVitoria))
    
mapa = Mapa()
mapa.fozDoIguacu.adjacentes
for i in range(len(mapa.fozDoIguacu.adjacentes)):
    print(mapa.fozDoIguacu.adjacentes[i].cidade.nome)



#Fila.py
class Fila:
    def __init__(self, tamanho):
        self.tamanho = tamanho
        self.cidades = [None] * self.tamanho
        self.inicio = 0
        self.fim = -1
        self.numeroElementos = 0
        
    def enfileirar(self, cidade):
        if not Fila.filaCheia(self):
            if self.fim == self.tamanho - 1:
                self.fim = -1
            self.fim += 1
            self.cidades[self.fim] = cidade
            self.numeroElementos += 1
        else:
            print("A fila já está cheia")
        
    def desenfileirar(self):
        if not Fila.filaVazia(self):
            temp = self.cidades[self.inicio]
            self.inicio += 1
            if self.inicio == self.tamanho:
                self.inicio = 0
            self.numeroElementos -= 1
            return temp
        else:
            print("A fila já está vazia")
            return None
    
    def getPrimeiro(self):
        return self.cidades[self.inicio]
    
    def filaVazia(self):
        return self.numeroElementos == 0
    
    def filaCheia(self):
        return self.numeroElementos == self.tamanho
    

#Largura.py

from Fila import Fila

class Largura:
    def __init__(self, inicio, objetivo):
        self.inicio = inicio
        self.inicio.visitado = True
        self.objetivo = objetivo
        self.fronteira = Fila(20)
        self.fronteira.enfileirar(inicio)
        self.achou = False
        
    def buscar(self):
        primeiro = self.fronteira.getPrimeiro()
        print('Primeiro: {}'.format(primeiro.nome))
        
        if primeiro == self.objetivo:
            self.achou = True
        else:
            temp = self.fronteira.desenfileirar()
            print('Desenfileirou: {}'.format(temp.nome))
            for a in primeiro.adjacentes:
                print('Verificando se já visitado: {}'.format(a.cidade.nome))
                if a.cidade.visitado == False:
                    a.cidade.visitado = True
                    self.fronteira.enfileirar(a.cidade)
            if self.fronteira.numeroElementos > 0:
                Largura.buscar(self)
            
from Mapa import Mapa
mapa = Mapa()
largura = Largura(mapa.fozDoIguacu, mapa.curitiba)
largura.buscar()